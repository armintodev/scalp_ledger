// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScalpLedger.Infrastructure.Persistence;

#nullable disable

namespace ScalpLedger.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(LedgerDbContext))]
    [Migration("20250828114602_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.7.25380.108")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScalpLedger.Domain.CandleSticks.Candle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Close")
                        .HasPrecision(30, 10)
                        .HasColumnType("numeric(30,10)")
                        .HasColumnName("close");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("High")
                        .HasPrecision(30, 10)
                        .HasColumnType("numeric(30,10)")
                        .HasColumnName("high");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.Property<decimal>("Low")
                        .HasPrecision(30, 10)
                        .HasColumnType("numeric(30,10)")
                        .HasColumnName("low");

                    b.Property<decimal>("Open")
                        .HasPrecision(30, 10)
                        .HasColumnType("numeric(30,10)")
                        .HasColumnName("open");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("symbol");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("timeframe");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<decimal>("Volume")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_candle");

                    b.HasIndex("Symbol", "Timeframe", "Timestamp")
                        .IsUnique()
                        .HasDatabaseName("ix_candle_symbol_timeframe_timestamp");

                    b.ToTable("candle", "market");
                });
#pragma warning restore 612, 618
        }
    }
}
